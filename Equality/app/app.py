"""
Panel de Inteligencia: Igualdad en Europa (ESS11)
Aplicaci√≥n principal de Streamlit

Autor: Panel BI - Equality Project
Fecha: 2025
"""

import streamlit as st
import pandas as pd
import numpy as np
from pathlib import Path

# Importar m√≥dulos personalizados
from config import (
    PAGE_CONFIG, APP_TITLE, APP_SUBTITLE, DEPENDENT_VARS,
    VAR_DESCRIPTIONS, COLOR_PALETTE
)
from data_loader import get_data_loader, DataLoader
from components import (
    render_sidebar, apply_education_filter, render_kpi_cards,
    render_variable_selector, render_section_header, render_info_box,
    render_stats_table, render_data_quality_warning, create_download_button,
    render_methodology_expander, render_footer
)
from visualizations import (
    create_distribution_histogram, create_gender_comparison,
    create_age_trend, create_education_trend, create_country_map,
    create_party_bar_chart, create_ideology_scatter,
    create_correlation_heatmap, create_top_bottom_chart,
    create_violin_plot, create_gender_frequency_histogram
)
from analytics import (
    calculate_spearman_correlation, test_normality,
    calculate_group_statistics, perform_gender_comparison,
    perform_age_correlation, perform_education_correlation,
    calculate_ideology_gradient, generate_summary_statistics,
    interpret_correlation_strength
)


# ============================================================================
# CONFIGURACI√ìN DE LA P√ÅGINA
# ============================================================================

st.set_page_config(**PAGE_CONFIG)


# ============================================================================
# CSS PERSONALIZADO
# ============================================================================

def load_custom_css():
    """Carga estilos CSS personalizados para mejorar la UX/UI."""
    st.markdown("""
    <style>
    /* Estilo general */
    .main {
        background-color: #f8f9fa;
    }
    
    /* T√≠tulos */
    h1 {
        color: #2c3e50;
        font-weight: 700;
        padding-bottom: 10px;
        border-bottom: 3px solid #3498db;
    }
    
    h2 {
        color: #34495e;
        font-weight: 600;
        margin-top: 30px;
    }
    
    h3 {
        color: #7f8c8d;
        font-weight: 500;
    }
    
    /* M√©tricas KPI */
    [data-testid="stMetricValue"] {
        font-size: 28px;
        font-weight: 700;
        color: #2c3e50;
    }
    
    [data-testid="stMetricLabel"] {
        font-size: 14px;
        font-weight: 600;
        color: #7f8c8d;
    }
    
    /* Sidebar */
    [data-testid="stSidebar"] {
        background-color: #ecf0f1;
    }
    
    /* Botones */
    .stButton>button {
        background-color: #3498db;
        color: white;
        border-radius: 5px;
        border: none;
        padding: 10px 24px;
        font-weight: 600;
        transition: all 0.3s;
    }
    
    .stButton>button:hover {
        background-color: #2980b9;
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    /* Expanders */
    .streamlit-expanderHeader {
        background-color: #ecf0f1;
        border-radius: 5px;
        font-weight: 600;
    }
    
    /* Men√∫ de navegaci√≥n */
    .nav-menu {
        background-color: white;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-top: 20px;
    }
    
    .nav-menu h4 {
        color: #2c3e50;
        font-size: 16px;
        font-weight: 700;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 2px solid #3498db;
    }
    
    .nav-link {
        display: block;
        padding: 8px 12px;
        margin: 5px 0;
        color: #34495e;
        text-decoration: none;
        border-radius: 5px;
        transition: all 0.3s;
        font-size: 14px;
    }
    
    .nav-link:hover {
        background-color: #ecf0f1;
        color: #3498db;
        padding-left: 18px;
    }
    
    .nav-link::before {
        content: "‚Üí ";
        margin-right: 5px;
    }
    
    /* Cajas de informaci√≥n */
    .stAlert {
        border-radius: 5px;
        padding: 15px;
    }
    
    /* Tablas */
    [data-testid="stDataFrame"] {
        border-radius: 5px;
    }
    
    /* Separadores */
    hr {
        margin: 30px 0;
        border: none;
        border-top: 2px solid #ecf0f1;
    }
    </style>
    """, unsafe_allow_html=True)


load_custom_css()


# ============================================================================
# INICIALIZACI√ìN DE DATOS
# ============================================================================

@st.cache_resource
def initialize_app():
    """Inicializa la aplicaci√≥n y carga los datos."""
    loader = get_data_loader()
    return loader


# Cargar datos
with st.spinner("‚è≥ Cargando datos del ESS11..."):
    data_loader = initialize_app()
    df = data_loader.get_data()


# ============================================================================
# INTERFAZ PRINCIPAL
# ============================================================================

# T√≠tulo y subt√≠tulo
st.title(APP_TITLE)
st.markdown(f"*{APP_SUBTITLE}*")
st.markdown("---")

# Renderizar sidebar con filtros
filters = render_sidebar(df)

# Aplicar filtros
df_filtered = data_loader.get_filtered_data(df, filters)

# Aplicar filtro educativo especial
if 'education_filter' in filters and filters['education_filter']:
    df_filtered = apply_education_filter(df_filtered, filters['education_filter'])

# Advertencia de calidad de datos
render_data_quality_warning(df_filtered, min_obs=30)

# Estad√≠sticas generales en el sidebar
st.sidebar.markdown("---")
st.sidebar.metric("Observaciones filtradas", f"{len(df_filtered):,}")
st.sidebar.metric("% del total", f"{(len(df_filtered)/len(df)*100):.1f}%")

# Men√∫ de navegaci√≥n
st.sidebar.markdown("---")
st.sidebar.markdown("""
<div class="nav-menu">
    <h4>üìã Navegaci√≥n</h4>
    <a href="#origen-de-los-datos" class="nav-link">Origen de los Datos</a>
    <a href="#limpieza-de-datos" class="nav-link">Limpieza de Datos</a>
    <a href="#exploraci-n-de-datos" class="nav-link">Exploraci√≥n de Datos</a>
    <a href="#an-lisis-espec-fico-espa-a" class="nav-link">An√°lisis Espa√±a</a>
    <a href="#matriz-de-correlaci-n" class="nav-link">Correlaciones</a>
    <a href="#conclusiones-clave" class="nav-link">Conclusiones</a>
</div>
""", unsafe_allow_html=True)

# ============================================================================
# SECCI√ìN: ORIGEN Y DATOS
# ============================================================================

st.markdown('<a id="origen-de-los-datos"></a>', unsafe_allow_html=True)
render_section_header(
    "Origen de los Datos",
    "Informaci√≥n sobre la fuente de datos y el contexto del estudio",
    "üìö"
)

col1, col2 = st.columns([2, 1])

with col1:
    st.markdown("""
    ### European Social Survey Round 11 (ESS11)
    
    La **European Social Survey (ESS)** es un estudio comparativo europeo de opini√≥n p√∫blica 
    que se realiza cada dos a√±os desde 2002. La Ronda 11 (2023) incluye respuestas de m√°s de 
    40,000 personas en m√°s de 30 pa√≠ses europeos.
    
    **Objetivos del ESS11:**
    - Monitorear actitudes, creencias y patrones de comportamiento en Europa
    - Proporcionar datos de alta calidad para investigaci√≥n acad√©mica y pol√≠ticas p√∫blicas
    - Facilitar comparaciones entre pa√≠ses y a lo largo del tiempo
    
    **Variables clave en este panel:**
    - **Igualdad de oportunidades** (ipeqopta): Apoyo a que todas las personas sean tratadas igual
    - **Igualdad salarial** (eqpaybg): Apoyo a la equidad salarial entre g√©neros
    - **Inter√©s pol√≠tico** (polintr): Nivel de inter√©s en asuntos pol√≠ticos
    - **Percepci√≥n sobre inmigraci√≥n** (imwbcnt): Actitudes hacia la inmigraci√≥n
    - **Relaciones de g√©nero** (wsekpwr): Percepciones sobre din√°micas de poder entre g√©neros
    """)

with col2:
    st.info(f"""
    **üìä Datos Cargados:**
    - **Total observaciones:** {len(df):,}
    - **Pa√≠ses incluidos:** {df['cntry'].nunique()}
    - **Variables analizadas:** {len(DEPENDENT_VARS)}
    - **Per√≠odo:** 2023
    """)
    
    # Bot√≥n de descarga
    create_download_button(
        df_filtered,
        "ess11_filtered_data.csv",
        "üì• Descargar datos filtrados"
    )

# Mostrar muestra de datos
with st.expander("üëÅÔ∏è Ver muestra de datos (primeras 100 filas)"):
    st.dataframe(df_filtered.head(100), use_container_width=True)


# ============================================================================
# SECCI√ìN: EXPLICACI√ìN DE LOS DATOS
# ============================================================================

render_section_header(
    "Explicaci√≥n de las Variables",
    "Descripci√≥n detallada de las variables analizadas",
    "üìñ"
)

# Selector de variable para ver descripci√≥n
selected_var_desc = st.selectbox(
    "Seleccionar variable para ver descripci√≥n:",
    options=list(DEPENDENT_VARS.keys()),
    format_func=lambda x: DEPENDENT_VARS[x],
    key="var_desc_select"
)

st.markdown(VAR_DESCRIPTIONS[selected_var_desc])

# Explicaci√≥n de limpieza de datos
st.markdown("---")
st.markdown('<a id="limpieza-de-datos"></a>', unsafe_allow_html=True)
st.markdown("#### üßπ Limpieza de Datos Aplicada")

# Diccionario con explicaciones de limpieza por variable (simplificado)
cleaning_explanations = {
    'ipeqopta': """
    **Valores eliminados:** 66, 77, 88, 99 (No aplicable, Rechazo, No sabe, Sin respuesta)
    
    **Transformaci√≥n:** Inversi√≥n de escala (7 - valor original) para que valores m√°s altos indiquen mayor apoyo.
    """,
    'eqpaybg': """
    **Valores eliminados:** 7, 8, 9 (Rechazo, No sabe, Sin respuesta)
    
    **Transformaci√≥n:** Ninguna.
    """,
    'polintr': """
    **Valores eliminados:** 7, 8, 9 (Rechazo, No sabe, Sin respuesta)
    
    **Transformaci√≥n:** Inversi√≥n de escala (5 - valor original) para que valores m√°s altos indiquen mayor inter√©s.
    """,
    'imwbcnt': """
    **Valores eliminados:** 77, 88, 99 (Rechazo, No sabe, Sin respuesta)
    
    **Transformaci√≥n:** Ninguna.
    """,
    'wsekpwr': """
    **Valores eliminados:** 7, 8, 9 (Rechazo, No sabe, Sin respuesta)
    
    **Transformaci√≥n:** Ninguna.
    """
}

st.info(cleaning_explanations[selected_var_desc])

st.markdown("**Nota:** Tambi√©n se eliminan observaciones con valores inv√°lidos en variables explicativas "
            "(g√©nero: 9, edad: 999, educaci√≥n: 5555/7777/8888/9999, partido: 66/77/88/99).")

st.markdown("---")

# Estad√≠sticas descriptivas de la variable seleccionada
stats = data_loader.get_variable_stats(df_filtered, selected_var_desc)

col1, col2, col3, col4 = st.columns(4)
with col1:
    st.metric("Media", f"{stats.get('mean', 0):.3f}")
with col2:
    st.metric("Mediana", f"{stats.get('median', 0):.3f}")
with col3:
    st.metric("Desv. Est.", f"{stats.get('std', 0):.3f}")
with col4:
    st.metric("Observaciones", f"{stats.get('count', 0):,}")

# Test de normalidad
normality = test_normality(df_filtered, selected_var_desc)
render_info_box(
    "Test de Normalidad (Shapiro-Wilk)",
    normality['message'],
    "info" if normality['is_normal'] else "warning"
)


# ============================================================================
# SECCI√ìN: AN√ÅLISIS EXPLORATORIO (EDA)
# ============================================================================
st.markdown('<a id="exploraci-n-de-datos"></a>', unsafe_allow_html=True)
render_section_header(
    "An√°lisis Exploratorio de Datos (EDA)",
    "An√°lisis bivariante de variables dependientes con factores sociodemogr√°ficos",
    "üîç"
)

# Selector de variable para EDA
selected_var = render_variable_selector(DEPENDENT_VARS, key="eda_var_select")

# Tabs para diferentes an√°lisis
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "üìä Distribuci√≥n General",
    "üë• An√°lisis por G√©nero",
    "üìÖ An√°lisis por Edad",
    "üéì An√°lisis por Educaci√≥n",
    "üåç An√°lisis por Pa√≠s"
])

# --- TAB 1: DISTRIBUCI√ìN GENERAL ---
with tab1:
    st.subheader(f"Distribuci√≥n de {DEPENDENT_VARS[selected_var]}")
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        # Histograma
        fig_hist = create_distribution_histogram(
            df_filtered,
            selected_var,
            f"Distribuci√≥n de {DEPENDENT_VARS[selected_var]}"
        )
        st.plotly_chart(fig_hist, use_container_width=True, config={'displayModeBar': True})
    
    with col2:
        # Estad√≠sticas completas
        summary_stats = generate_summary_statistics(df_filtered, selected_var)
        st.dataframe(summary_stats, use_container_width=True)
    
    # Test de normalidad
    normality = test_normality(df_filtered, selected_var)
    if normality['is_normal']:
        st.success(f"‚úÖ La variable sigue una distribuci√≥n normal (p = {normality['pvalue']:.4f})")
    else:
        st.warning(f"‚ö†Ô∏è La variable NO sigue una distribuci√≥n normal (p = {normality['pvalue']:.4f}). "
                  "Se recomienda usar estad√≠stica no param√©trica (Spearman, Mann-Whitney).")

# --- TAB 2: AN√ÅLISIS POR G√âNERO ---
with tab2:
    st.subheader(f"{DEPENDENT_VARS[selected_var]} por G√©nero")
    
    # Realizar an√°lisis de g√©nero
    gender_analysis = perform_gender_comparison(df_filtered, selected_var)
    
    if 'error' not in gender_analysis:
        # Calcular correlaci√≥n de Spearman para g√©nero
        data_gender = df_filtered[['gndr', selected_var]].dropna()
        
        if len(data_gender) >= 10:
            corr, pval = calculate_spearman_correlation(df_filtered, 'gndr', selected_var)
            
            gender_corr = {
                'correlation': corr,
                'p_value': pval,
                'strength': interpret_correlation_strength(corr),
                'significant': pval < 0.05,
                'direction': 'positiva' if corr > 0 else 'negativa'
            }
        else:
            gender_corr = None
        
        # Primera fila de KPIs: Medias y Brecha
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Media Hombres", f"{gender_analysis['male_mean']:.3f}")
        with col2:
            st.metric("Media Mujeres", f"{gender_analysis['female_mean']:.3f}")
        with col3:
            st.metric("Brecha de G√©nero", f"{gender_analysis['gap']:.3f}")
        
        # Segunda fila de KPIs: Correlaci√≥n, Fuerza y Significaci√≥n
        if gender_corr:
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Correlaci√≥n con G√©nero", f"{gender_corr['correlation']:.3f}")
            with col2:
                st.metric("Fuerza", gender_corr['strength'])
            with col3:
                significacion = "S√≠ (p < 0.05)" if gender_corr['significant'] else "No (p ‚â• 0.05)"
                st.metric("Significaci√≥n", significacion)
            
            # Nota interpretativa personalizada por variable (en verde si positiva, rojo si negativa)
            gender_notes = {
                'ipeqopta': {
                    'positive': "**Nota:** Una correlaci√≥n positiva indica que las mujeres creen **M√ÅS** en la igualdad de las personas y apoyan **M√ÅS** la igualdad de oportunidades que los hombres.",
                    'negative': "**Nota:** Una correlaci√≥n negativa indica que los hombres creen **M√ÅS** en la igualdad de las personas y apoyan **M√ÅS** la igualdad de oportunidades que las mujeres."
                },
                'eqpaybg': {
                    'positive': "**Nota:** Una correlaci√≥n positiva indica que las mujeres apoyan **M√ÅS** la igualdad salarial entre g√©neros que los hombres.",
                    'negative': "**Nota:** Una correlaci√≥n negativa indica que los hombres apoyan **M√ÅS** la igualdad salarial entre g√©neros que las mujeres."
                },
                'polintr': {
                    'positive': "**Nota:** Una correlaci√≥n positiva indica que las mujeres tienen **M√ÅS** inter√©s en pol√≠tica que los hombres.",
                    'negative': "**Nota:** Una correlaci√≥n negativa indica que los hombres tienen **M√ÅS** inter√©s en pol√≠tica que las mujeres."
                },
                'imwbcnt': {
                    'positive': "**Nota:** Una correlaci√≥n positiva indica que las mujeres tienen una percepci√≥n **M√ÅS POSITIVA** sobre la inmigraci√≥n que los hombres.",
                    'negative': "**Nota:** Una correlaci√≥n negativa indica que los hombres tienen una percepci√≥n **M√ÅS POSITIVA** sobre la inmigraci√≥n que las mujeres."
                },
                'wsekpwr': {
                    'positive': "**Nota:** Una correlaci√≥n positiva indica que las mujeres est√°n **M√ÅS DE ACUERDO** con que las mujeres buscan tener m√°s poder que los hombres.",
                    'negative': "**Nota:** Una correlaci√≥n negativa indica que los hombres est√°n **M√ÅS DE ACUERDO** con que las mujeres buscan tener m√°s poder que los hombres."
                }
            }
            
            note_text = gender_notes[selected_var]['positive'] if corr > 0 else gender_notes[selected_var]['negative']
            
            # Verde para correlaci√≥n positiva, rojo para negativa
            if corr > 0:
                st.success(note_text)  # Verde
            else:
                st.error(note_text)  # Rojo
        
        # Gr√°fico de frecuencias por g√©nero
        fig_gender = create_gender_frequency_histogram(
            df_filtered,
            selected_var,
            f"Distribuci√≥n por G√©nero - {DEPENDENT_VARS[selected_var]}"
        )
        st.plotly_chart(fig_gender, use_container_width=True)
    
    else:
        st.warning("‚ö†Ô∏è Datos insuficientes para an√°lisis por g√©nero.")

# --- TAB 3: AN√ÅLISIS POR EDAD ---
with tab3:
    st.subheader(f"{DEPENDENT_VARS[selected_var]} por Edad")
    
    # Realizar an√°lisis de edad
    age_analysis = perform_age_correlation(df_filtered, selected_var)
    
    if 'error' not in age_analysis:
        # KPIs en una sola fila
        age_gradient = data_loader.calculate_age_gradient(df_filtered, selected_var)
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Correlaci√≥n con Edad", f"{age_analysis['correlation']:.3f}")
        with col2:
            st.metric("Fuerza", age_analysis['strength'])
        with col3:
            st.metric("Gradiente (J√≥venes-Mayores)", f"{age_gradient:.3f}")
        with col4:
            significacion = "S√≠ (p < 0.05)" if age_analysis['significant'] else "No (p ‚â• 0.05)"
            st.metric("Significaci√≥n", significacion)
        
        # Nota interpretativa personalizada por variable (en verde si negativa, rojo si positiva para edad)
        age_notes = {
            'ipeqopta': {
                'positive': "**Nota:** Una correlaci√≥n positiva indica que las personas **M√ÅS MAYORES** apoyan **M√ÅS** la igualdad de oportunidades.",
                'negative': "**Nota:** Una correlaci√≥n negativa indica que las personas **M√ÅS J√ìVENES** apoyan **M√ÅS** la igualdad de oportunidades."
            },
            'eqpaybg': {
                'positive': "**Nota:** Una correlaci√≥n positiva indica que las personas **M√ÅS MAYORES** apoyan **M√ÅS** la igualdad salarial.",
                'negative': "**Nota:** Una correlaci√≥n negativa indica que las personas **M√ÅS J√ìVENES** apoyan **M√ÅS** la igualdad salarial."
            },
            'polintr': {
                'positive': "**Nota:** Una correlaci√≥n positiva indica que las personas **M√ÅS MAYORES** tienen **M√ÅS** inter√©s en pol√≠tica.",
                'negative': "**Nota:** Una correlaci√≥n negativa indica que las personas **M√ÅS J√ìVENES** tienen **M√ÅS** inter√©s en pol√≠tica."
            },
            'imwbcnt': {
                'positive': "**Nota:** Una correlaci√≥n positiva indica que las personas **M√ÅS MAYORES** tienen una percepci√≥n **M√ÅS POSITIVA** sobre la inmigraci√≥n.",
                'negative': "**Nota:** Una correlaci√≥n negativa indica que las personas **M√ÅS J√ìVENES** tienen una percepci√≥n **M√ÅS POSITIVA** sobre la inmigraci√≥n."
            },
            'wsekpwr': {
                'positive': "**Nota:** Una correlaci√≥n positiva indica que las personas **M√ÅS MAYORES** est√°n **M√ÅS DE ACUERDO** con que las mujeres buscan tener m√°s poder.",
                'negative': "**Nota:** Una correlaci√≥n negativa indica que las personas **M√ÅS J√ìVENES** est√°n **M√ÅS DE ACUERDO** con que las mujeres buscan tener m√°s poder."
            }
        }
        
        note_text = age_notes[selected_var]['positive'] if age_analysis['correlation'] > 0 else age_notes[selected_var]['negative']
        
        # Verde para correlaci√≥n positiva, rojo para negativa
        if age_analysis['correlation'] > 0:
            st.success(note_text)  # Verde
        else:
            st.error(note_text)  # Rojo
        
        # Visualizaci√≥n
        fig_age = create_age_trend(
            df_filtered,
            selected_var,
            f"{DEPENDENT_VARS[selected_var]} por Tramo de Edad"
        )
        st.plotly_chart(fig_age, use_container_width=True)
    
    else:
        st.warning("‚ö†Ô∏è Datos insuficientes para an√°lisis por edad.")

# --- TAB 4: AN√ÅLISIS POR EDUCACI√ìN ---
with tab4:
    st.subheader(f"{DEPENDENT_VARS[selected_var]} por Nivel Educativo")
    
    # Realizar an√°lisis educativo
    edu_analysis = perform_education_correlation(df_filtered, selected_var)
    
    if 'error' not in edu_analysis:
        # KPIs en una sola fila
        edu_gradient = data_loader.calculate_education_gradient(df_filtered, selected_var)
        
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Correlaci√≥n con Educaci√≥n", f"{edu_analysis['correlation']:.3f}")
        with col2:
            st.metric("Fuerza", edu_analysis['strength'])
        with col3:
            st.metric("Gradiente (Q4-Q1)", f"{edu_gradient:.3f}")
        with col4:
            significacion = "S√≠ (p < 0.05)" if edu_analysis['significant'] else "No (p ‚â• 0.05)"
            st.metric("Significaci√≥n", significacion)
        
        # Nota interpretativa personalizada por variable (en verde si positiva, rojo si negativa)
        edu_notes = {
            'ipeqopta': {
                'positive': "**Nota:** Una correlaci√≥n positiva indica que las personas con **MAYOR NIVEL EDUCATIVO** apoyan **M√ÅS** la igualdad de oportunidades.",
                'negative': "**Nota:** Una correlaci√≥n negativa indica que las personas con **MENOR NIVEL EDUCATIVO** apoyan **M√ÅS** la igualdad de oportunidades."
            },
            'eqpaybg': {
                'positive': "**Nota:** Una correlaci√≥n positiva indica que las personas con **MAYOR NIVEL EDUCATIVO** apoyan **M√ÅS** la igualdad salarial.",
                'negative': "**Nota:** Una correlaci√≥n negativa indica que las personas con **MENOR NIVEL EDUCATIVO** apoyan **M√ÅS** la igualdad salarial."
            },
            'polintr': {
                'positive': "**Nota:** Una correlaci√≥n positiva indica que las personas con **MAYOR NIVEL EDUCATIVO** tienen **M√ÅS** inter√©s en pol√≠tica.",
                'negative': "**Nota:** Una correlaci√≥n negativa indica que las personas con **MENOR NIVEL EDUCATIVO** tienen **M√ÅS** inter√©s en pol√≠tica."
            },
            'imwbcnt': {
                'positive': "**Nota:** Una correlaci√≥n positiva indica que las personas con **MAYOR NIVEL EDUCATIVO** tienen una percepci√≥n **M√ÅS POSITIVA** sobre la inmigraci√≥n.",
                'negative': "**Nota:** Una correlaci√≥n negativa indica que las personas con **MENOR NIVEL EDUCATIVO** tienen una percepci√≥n **M√ÅS POSITIVA** sobre la inmigraci√≥n."
            },
            'wsekpwr': {
                'positive': "**Nota:** Una correlaci√≥n positiva indica que las personas con **MAYOR NIVEL EDUCATIVO** est√°n **M√ÅS DE ACUERDO** con que las mujeres buscan tener m√°s poder.",
                'negative': "**Nota:** Una correlaci√≥n negativa indica que las personas con **MENOR NIVEL EDUCATIVO** est√°n **M√ÅS DE ACUERDO** con que las mujeres buscan tener m√°s poder."
            }
        }
        
        note_text = edu_notes[selected_var]['positive'] if edu_analysis['correlation'] > 0 else edu_notes[selected_var]['negative']
        
        if edu_analysis['correlation'] > 0:
            st.success(note_text)  # Verde si correlaci√≥n positiva (mayor educaci√≥n = m√°s apoyo)
        else:
            st.error(note_text)  # Rojo si correlaci√≥n negativa
        
        # Visualizaci√≥n
        fig_edu = create_education_trend(
            df_filtered,
            selected_var,
            f"{DEPENDENT_VARS[selected_var]} por Nivel Educativo"
        )
        st.plotly_chart(fig_edu, use_container_width=True)
    
    else:
        st.warning("‚ö†Ô∏è Datos insuficientes para an√°lisis educativo.")

# --- TAB 5: AN√ÅLISIS POR PA√çS ---
with tab5:
    st.subheader(f"{DEPENDENT_VARS[selected_var]} por Pa√≠s")
    
    # Mapa coropl√©tico - ampliado a ancho completo sin columnas laterales
    st.markdown("### üó∫Ô∏è Mapa de Europa")
    fig_map = create_country_map(
        df_filtered,
        selected_var,
        f"{DEPENDENT_VARS[selected_var]} por Pa√≠s"
    )
    # Usar contenedor completo sin restricciones para maximizar el ancho del mapa
    st.plotly_chart(fig_map, use_container_width=True, config={
        'displayModeBar': True,
        'displaylogo': False,
        'modeBarButtonsToRemove': ['select2d', 'lasso2d']
    })
    
    # Ranking de pa√≠ses
    st.markdown("### üèÜ Ranking de Pa√≠ses")
    
    top_countries, bottom_countries = data_loader.get_country_ranking(
        df_filtered,
        selected_var,
        top_n=5
    )
    
    if not top_countries.empty and not bottom_countries.empty:
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Top 5 Pa√≠ses**")
            st.dataframe(
                top_countries[['country_name', 'mean', 'count']].rename(columns={
                    'country_name': 'Pa√≠s',
                    'mean': 'Media',
                    'count': 'N'
                }),
                hide_index=True,
                use_container_width=True
            )
        
        with col2:
            st.markdown("**Bottom 5 Pa√≠ses**")
            st.dataframe(
                bottom_countries[['country_name', 'mean', 'count']].rename(columns={
                    'country_name': 'Pa√≠s',
                    'mean': 'Media',
                    'count': 'N'
                }),
                hide_index=True,
                use_container_width=True
            )
        
        # Gr√°fico comparativo
        fig_top_bottom = create_top_bottom_chart(
            top_countries,
            bottom_countries,
            selected_var,
            f"Top 5 y Bottom 5 Pa√≠ses - {DEPENDENT_VARS[selected_var]}"
        )
        st.plotly_chart(fig_top_bottom, use_container_width=True)
    
    else:
        st.warning("‚ö†Ô∏è Datos insuficientes para ranking de pa√≠ses.")


# ============================================================================
# SECCI√ìN: AN√ÅLISIS ESPA√ëA (IDEOLOG√çA Y PARTIDOS)
# ============================================================================

if 'ES' in df_filtered['cntry'].values:
    st.markdown('<a id="an-lisis-espec-fico-espa-a"></a>', unsafe_allow_html=True)
    render_section_header(
        "An√°lisis Espec√≠fico: Espa√±a",
        "An√°lisis de actitudes por partido pol√≠tico, ideolog√≠a y nacionalismo",
        "üü•üü®üü•"
    )
    
    # Filtrar solo Espa√±a
    df_spain = df_filtered[df_filtered['cntry'] == 'ES'].copy()
    
    if len(df_spain) >= 30:
        # Selector de variable
        selected_var_spain = render_variable_selector(DEPENDENT_VARS, key="spain_var_select")
        
        # Tabs para an√°lisis Espa√±a
        tab_spain1, tab_spain2, tab_spain3 = st.tabs([
            "üó≥Ô∏è Por Partido",
            "‚¨ÖÔ∏è‚û°Ô∏è Por Ideolog√≠a",
            "üè¥ Por Nacionalismo"
        ])
        
        # --- TAB: POR PARTIDO ---
        with tab_spain1:
            st.subheader(f"{DEPENDENT_VARS[selected_var_spain]} por Partido Pol√≠tico")
            
            fig_party = create_party_bar_chart(
                df_spain,
                selected_var_spain,
                f"{DEPENDENT_VARS[selected_var_spain]} por Partido"
            )
            st.plotly_chart(fig_party, use_container_width=True)
            
            # Estad√≠sticas por partido
            party_stats = calculate_group_statistics(
                df_spain[df_spain['party_name'].notna()],
                selected_var_spain,
                'party_name'
            )
            
            st.markdown("### Estad√≠sticas por Partido")
            st.dataframe(
                party_stats.rename(columns={
                    'party_name': 'Partido',
                    'count': 'N',
                    'mean': 'Media',
                    'median': 'Mediana',
                    'std': 'Desv. Est.',
                    'min': 'M√≠nimo',
                    'max': 'M√°ximo'
                }),
                hide_index=True,
                use_container_width=True
            )
        
        # --- TAB: POR IDEOLOG√çA ---
        with tab_spain2:
            st.subheader(f"{DEPENDENT_VARS[selected_var_spain]} por Ideolog√≠a")
            
            # Verificar datos suficientes
            if df_spain['ideology'].notna().sum() >= 10:
                # Calcular correlaci√≥n y gradiente ideol√≥gico
                corr, pval = calculate_spearman_correlation(df_spain, 'ideology', selected_var_spain)
                ideo_gradient = calculate_ideology_gradient(df_spain, selected_var_spain)
                
                # M√©tricas en una fila
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("Gradiente Ideol√≥gico", f"{ideo_gradient:.3f}")
                with col2:
                    st.metric("Correlaci√≥n con Ideolog√≠a", f"{corr:.3f}")
                with col3:
                    st.metric("Fuerza", interpret_correlation_strength(corr))
                with col4:
                    significacion = "S√≠ (p < 0.05)" if pval < 0.05 else "No (p ‚â• 0.05)"
                    st.metric("Significaci√≥n", significacion)
                
                # Nota interpretativa personalizada por variable
                ideology_notes = {
                    'ipeqopta': {
                        'positive': "**Nota:** Una correlaci√≥n positiva indica que los votantes de **DERECHA** apoyan **M√ÅS** la igualdad de oportunidades.",
                        'negative': "**Nota:** Una correlaci√≥n negativa indica que los votantes de **IZQUIERDA** apoyan **M√ÅS** la igualdad de oportunidades."
                    },
                    'eqpaybg': {
                        'positive': "**Nota:** Una correlaci√≥n positiva indica que los votantes de **DERECHA** apoyan **M√ÅS** la igualdad salarial.",
                        'negative': "**Nota:** Una correlaci√≥n negativa indica que los votantes de **IZQUIERDA** apoyan **M√ÅS** la igualdad salarial."
                    },
                    'polintr': {
                        'positive': "**Nota:** Una correlaci√≥n positiva indica que los votantes de **DERECHA** tienen **M√ÅS** inter√©s en pol√≠tica.",
                        'negative': "**Nota:** Una correlaci√≥n negativa indica que los votantes de **IZQUIERDA** tienen **M√ÅS** inter√©s en pol√≠tica."
                    },
                    'imwbcnt': {
                        'positive': "**Nota:** Una correlaci√≥n positiva indica que los votantes de **DERECHA** tienen una percepci√≥n **M√ÅS POSITIVA** sobre la inmigraci√≥n.",
                        'negative': "**Nota:** Una correlaci√≥n negativa indica que los votantes de **IZQUIERDA** tienen una percepci√≥n **M√ÅS POSITIVA** sobre la inmigraci√≥n."
                    },
                    'wsekpwr': {
                        'positive': "**Nota:** Una correlaci√≥n positiva indica que los votantes de **DERECHA** perciben **M√ÅS** control de las mujeres sobre los hombres.",
                        'negative': "**Nota:** Una correlaci√≥n negativa indica que los votantes de **IZQUIERDA** perciben **M√ÅS** control de las mujeres sobre los hombres."
                    }
                }
                
                note_text = ideology_notes[selected_var_spain]['positive'] if corr > 0 else ideology_notes[selected_var_spain]['negative']
                
                # Verde para correlaci√≥n positiva, rojo para negativa
                if corr > 0:
                    st.success(note_text)  # Verde
                else:
                    st.error(note_text)  # Rojo
                
                # Tabla de clasificaci√≥n de partidos por ideolog√≠a
                with st.expander("üìã Ver clasificaci√≥n de partidos por ideolog√≠a"):
                    st.markdown("**Escala ideol√≥gica asignada a cada partido (1=Izquierda, 5=Derecha):**")
                    
                    ideology_data = {
                        'Partido': ['SUMAR', 'ERC', 'EH-Bildu', 'BNG', 'PSOE', 'PACMA', 
                                   'EAJ-PNV', 'Coalici√≥n Canaria', 'PP', 'JuntsxCat', 'UPN', 'VOX'],
                        'Ideolog√≠a': [1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 5],
                        'Clasificaci√≥n': ['Izquierda', 'Izquierda nacionalista', 'Izquierda nacionalista', 
                                         'Izquierda nacionalista', 'Centroizquierda', 'Centroizquierda ecologista',
                                         'Centroderecha nacionalista', 'Centroderecha regionalista', 
                                         'Derecha', 'Derecha nacionalista', 'Derecha regionalista', 'Derecha radical']
                    }
                    st.table(pd.DataFrame(ideology_data))
                
                # Dispersograma
                fig_ideo = create_ideology_scatter(
                    df_spain,
                    selected_var_spain,
                    f"{DEPENDENT_VARS[selected_var_spain]} vs Ideolog√≠a"
                )
                st.plotly_chart(fig_ideo, use_container_width=True)
            else:
                st.warning("‚ö†Ô∏è Datos insuficientes para an√°lisis de ideolog√≠a.")
        
        # --- TAB: POR NACIONALISMO ---
        with tab_spain3:
            st.subheader(f"{DEPENDENT_VARS[selected_var_spain]} por Nacionalismo")
            
            # Verificar datos suficientes
            if df_spain['nationalism'].notna().sum() >= 10:
                # Calcular correlaci√≥n
                corr, pval = calculate_spearman_correlation(df_spain, 'nationalism', selected_var_spain)
                
                # Calcular gradiente nacionalista (similar a ideol√≥gico)
                # Gradiente = diferencia entre Q4 (alto nacionalismo) y Q1 (bajo nacionalismo)
                df_nat_valid = df_spain[['nationalism', selected_var_spain]].dropna()
                if len(df_nat_valid) >= 20:
                    q1 = df_nat_valid['nationalism'].quantile(0.25)
                    q4 = df_nat_valid['nationalism'].quantile(0.75)
                    mean_low_nat = df_nat_valid[df_nat_valid['nationalism'] <= q1][selected_var_spain].mean()
                    mean_high_nat = df_nat_valid[df_nat_valid['nationalism'] >= q4][selected_var_spain].mean()
                    nat_gradient = mean_high_nat - mean_low_nat
                else:
                    nat_gradient = 0
                
                # M√©tricas en una fila
                col1, col2, col3, col4 = st.columns(4)
                with col1:
                    st.metric("Gradiente Nacionalista", f"{nat_gradient:.3f}")
                with col2:
                    st.metric("Correlaci√≥n con Nacionalismo", f"{corr:.3f}")
                with col3:
                    st.metric("Fuerza", interpret_correlation_strength(corr))
                with col4:
                    significacion = "S√≠ (p < 0.05)" if pval < 0.05 else "No (p ‚â• 0.05)"
                    st.metric("Significaci√≥n", significacion)
                
                # Nota interpretativa personalizada por variable
                nationalism_notes = {
                    'ipeqopta': {
                        'positive': "**Nota:** Una correlaci√≥n positiva indica que las personas con **MAYOR NACIONALISMO** apoyan **M√ÅS** la igualdad de oportunidades.",
                        'negative': "**Nota:** Una correlaci√≥n negativa indica que las personas con **MENOR NACIONALISMO** apoyan **M√ÅS** la igualdad de oportunidades."
                    },
                    'eqpaybg': {
                        'positive': "**Nota:** Una correlaci√≥n positiva indica que las personas con **MAYOR NACIONALISMO** apoyan **M√ÅS** la igualdad salarial.",
                        'negative': "**Nota:** Una correlaci√≥n negativa indica que las personas con **MENOR NACIONALISMO** apoyan **M√ÅS** la igualdad salarial."
                    },
                    'polintr': {
                        'positive': "**Nota:** Una correlaci√≥n positiva indica que las personas con **MAYOR NACIONALISMO** tienen **M√ÅS** inter√©s en pol√≠tica.",
                        'negative': "**Nota:** Una correlaci√≥n negativa indica que las personas con **MENOR NACIONALISMO** tienen **M√ÅS** inter√©s en pol√≠tica."
                    },
                    'imwbcnt': {
                        'positive': "**Nota:** Una correlaci√≥n positiva indica que las personas con **MAYOR NACIONALISMO** tienen una percepci√≥n **M√ÅS POSITIVA** sobre la inmigraci√≥n.",
                        'negative': "**Nota:** Una correlaci√≥n negativa indica que las personas con **MENOR NACIONALISMO** tienen una percepci√≥n **M√ÅS POSITIVA** sobre la inmigraci√≥n."
                    },
                    'wsekpwr': {
                        'positive': "**Nota:** Una correlaci√≥n positiva indica que las personas con **MAYOR NACIONALISMO** perciben **M√ÅS** control de las mujeres sobre los hombres.",
                        'negative': "**Nota:** Una correlaci√≥n negativa indica que las personas con **MENOR NACIONALISMO** perciben **M√ÅS** control de las mujeres sobre los hombres."
                    }
                }
                
                note_text = nationalism_notes[selected_var_spain]['positive'] if corr > 0 else nationalism_notes[selected_var_spain]['negative']
                
                # Verde para correlaci√≥n positiva, rojo para negativa
                if corr > 0:
                    st.success(note_text)  # Verde
                else:
                    st.error(note_text)  # Rojo
                
                # Tabla de clasificaci√≥n de partidos por nacionalismo
                with st.expander("üìã Ver clasificaci√≥n de partidos por nacionalismo"):
                    st.markdown("**Escala de nacionalismo asignada a cada partido (1=Bajo, 5=Alto):**")
                    
                    nationalism_data = {
                        'Partido': ['PP', 'PSOE', 'VOX', 'SUMAR', 'PACMA', 'Coalici√≥n Canaria', 'UPN', 
                                   'EAJ-PNV', 'BNG', 'ERC', 'JuntsxCat', 'EH-Bildu'],
                        'Nacionalismo': [1, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4],
                        'Tipo': ['No nacionalista', 'No nacionalista', 'No nacionalista', 
                                'No nacionalista', 'No nacionalista', 'Regionalista moderado', 'Regionalista moderado',
                                'Nacionalista', 'Nacionalista', 
                                'Independentista', 'Independentista', 'Independentista']
                    }
                    st.table(pd.DataFrame(nationalism_data))
                
                # Dispersograma nacionalismo
                fig_nat = create_ideology_scatter(
                    df_spain,
                    selected_var_spain,
                    f"{DEPENDENT_VARS[selected_var_spain]} vs Nacionalismo",
                    x_var='nationalism'
                )
                st.plotly_chart(fig_nat, use_container_width=True)
            else:
                st.warning("‚ö†Ô∏è Datos insuficientes para an√°lisis de nacionalismo.")
    
    else:
        st.warning("‚ö†Ô∏è Datos insuficientes de Espa√±a en la selecci√≥n actual.")


# ============================================================================
# SECCI√ìN: MATRIZ DE CORRELACIONES
# ============================================================================

st.markdown('<a id="matriz-de-correlaci-n"></a>', unsafe_allow_html=True)
render_section_header(
    "Matriz de Correlaciones",
    "An√°lisis de correlaciones entre todas las variables dependientes (Spearman)",
    "üìà"
)

# Crear matriz de correlaci√≥n
variables_for_corr = list(DEPENDENT_VARS.keys())
available_vars = [v for v in variables_for_corr if v in df_filtered.columns]

if len(available_vars) >= 2:
    fig_corr = create_correlation_heatmap(
        df_filtered,
        available_vars,
        "Matriz de Correlaci√≥n (Spearman)"
    )
    st.plotly_chart(fig_corr, use_container_width=True)
    
    st.info("""
    üí° **Interpretaci√≥n:**
    - Valores cercanos a **1** (rojo): correlaci√≥n positiva fuerte
    - Valores cercanos a **-1** (azul): correlaci√≥n negativa fuerte
    - Valores cercanos a **0** (blanco): sin correlaci√≥n
    """)
    
    # =========================================================================
    # INTERPRETACIONES DESTACADAS
    # =========================================================================
    st.markdown("### ÔøΩ INTERPRETACIONES DESTACADAS")
    
    # Calcular todas las correlaciones con p-values
    df_multivar = df_filtered[available_vars].dropna()
    
    if len(df_multivar) >= 10:
        interpretations = []
        
        for i, var1 in enumerate(available_vars):
            for j, var2 in enumerate(available_vars):
                if i < j:  # Solo pares √∫nicos (evitar duplicados y diagonal)
                    corr, pval = calculate_spearman_correlation(df_multivar, var1, var2)
                    
                    # Solo mostrar correlaciones significativas Y con valor absoluto > 0.1
                    if pval < 0.05 and abs(corr) > 0.1:
                        # Determinar fuerza
                        abs_corr = abs(corr)
                        if abs_corr < 0.20:
                            fuerza = "MUY D√âBIL"
                        elif abs_corr < 0.40:
                            fuerza = "D√âBIL"
                        elif abs_corr < 0.60:
                            fuerza = "MODERADA"
                        elif abs_corr < 0.80:
                            fuerza = "FUERTE"
                        else:
                            fuerza = "MUY FUERTE"
                        
                        # Significancia
                        if pval < 0.001:
                            sig = "***"
                        elif pval < 0.01:
                            sig = "**"
                        else:
                            sig = "*"
                        
                        interpretations.append({
                            'var1': var1,
                            'var2': var2,
                            'corr': corr,
                            'pval': pval,
                            'fuerza': fuerza,
                            'sig': sig,
                            'abs_corr': abs_corr
                        })
        
        # Ordenar por valor absoluto de correlaci√≥n (de mayor a menor)
        interpretations.sort(key=lambda x: x['abs_corr'], reverse=True)
        
        if interpretations:
            for interp in interpretations:
                var1_name = DEPENDENT_VARS[interp['var1']]
                var2_name = DEPENDENT_VARS[interp['var2']]
                
                # Formato compacto sin columnas
                st.markdown(f"""
                ‚úì **{var1_name}** vs **{var2_name}**: Correlaci√≥n = **{interp['corr']:.4f}** ({interp['fuerza']}) | p-value: {interp['pval']:.4e} {interp['sig']}
                """)
        else:
            st.info("‚ÑπÔ∏è No se encontraron correlaciones significativas mayores a 0.1 entre las variables.")
    else:
        st.warning("‚ö†Ô∏è Datos insuficientes para calcular correlaciones significativas.")
else:
    st.warning("‚ö†Ô∏è Se necesitan al menos 2 variables para crear matriz de correlaci√≥n.")


# ============================================================================
# SECCI√ìN: CONCLUSIONES
# ============================================================================

st.markdown('<a id="conclusiones-clave"></a>', unsafe_allow_html=True)
render_section_header(
    "Conclusiones Clave",
    "Hallazgos principales del an√°lisis exploratorio",
    "üí°"
)

st.markdown("""
### üéØ Hallazgos Principales

Bas√°ndose en el an√°lisis exploratorio de datos del ESS11, se identifican los siguientes patrones clave:

#### 1. **Igualdad de Oportunidades (ipeqopta)**
- ‚úÖ **Mayor apoyo entre mujeres**, j√≥venes y personas con mayor nivel educativo
- ‚úÖ **Gradiente ideol√≥gico claro**: mayor apoyo en votantes de izquierda (SUMAR, ERC, EH-Bildu, BNG)
- ‚úÖ **Variabilidad significativa entre pa√≠ses**: patrones regionales evidentes
- üîç **En Espa√±a**: correlaci√≥n negativa con ideolog√≠a (izquierda apoya m√°s) y con nacionalismo

#### 2. **Igualdad Salarial (eqpaybg)**
- ‚úÖ **Brecha de g√©nero consistente**: las mujeres muestran mayor apoyo
- ‚úÖ **Efecto generacional**: los j√≥venes apoyan m√°s la igualdad salarial
- ‚úÖ **Educaci√≥n como predictor fuerte**: a mayor educaci√≥n, mayor apoyo
- üîç **En Espa√±a**: correlaci√≥n negativa con ideolog√≠a (izquierda apoya m√°s)

#### 3. **Inter√©s Pol√≠tico (polintr)**
- ‚ö†Ô∏è **Brecha de g√©nero persistente**: los hombres declaran mayor inter√©s
- ‚úÖ **Pico en edades medias** (45-64 a√±os)
- ‚úÖ **Fuerte correlaci√≥n con educaci√≥n**: la educaci√≥n predice el compromiso pol√≠tico
- üîç **En Espa√±a**: el inter√©s pol√≠tico var√≠a seg√∫n contexto, con mayor participaci√≥n en partidos nacionalistas

#### 4. **Percepci√≥n sobre Inmigraci√≥n (imwbcnt)**
- ‚úÖ **Cambio generacional evidente**: los j√≥venes tienen actitudes m√°s favorables
- ‚úÖ **Educaci√≥n como factor cr√≠tico**: a mayor educaci√≥n, percepciones m√°s positivas
- ‚úÖ **Correlaci√≥n negativa con nacionalismo**: menor nacionalismo predice actitudes m√°s favorables
- üîç **En Espa√±a**: votantes de izquierda y partidos no nacionalistas (PP, PSOE, VOX, SUMAR, PACMA) muestran percepciones m√°s positivas

#### 5. **Relaciones de G√©nero (wsekpwr)**
- ‚ö†Ô∏è **Brecha de g√©nero muy significativa**: los hombres muestran mayor acuerdo
- ‚úÖ **Efecto de la educaci√≥n**: la educaci√≥n reduce creencias sobre din√°micas de control
- ‚úÖ **Relevancia para pol√≠ticas de igualdad**: indicador cr√≠tico de actitudes subyacentes
- üîç **En Espa√±a**: correlaci√≥n positiva con ideolog√≠a de derecha y con nacionalismo

### üìä Implicaciones para Pol√≠ticas P√∫blicas

1. **Educaci√≥n como palanca de cambio**: La educaci√≥n emerge como predictor consistente de actitudes 
   favorables hacia la igualdad en m√∫ltiples dimensiones.

2. **Brechas generacionales**: Los datos sugieren cambios actitudinales positivos en cohortes m√°s j√≥venes,
   pero tambi√©n desaf√≠os en la participaci√≥n pol√≠tica juvenil.

3. **Variabilidad entre pa√≠ses**: La heterogeneidad entre pa√≠ses sugiere que las pol√≠ticas y contextos
   nacionales importan significativamente.

4. **Persistencia de brechas de g√©nero**: Las diferencias de g√©nero en actitudes y participaci√≥n pol√≠tica
   requieren intervenciones espec√≠ficas.

### üîÆ Pr√≥ximos Pasos

- **An√°lisis multivariante**: Modelos de regresi√≥n para aislar efectos independientes
- **An√°lisis longitudinal**: Comparaci√≥n con rondas anteriores del ESS para tendencias temporales
- **Segmentaci√≥n avanzada**: An√°lisis de clusters para identificar tipolog√≠as de pa√≠ses/grupos
""")


# ============================================================================
# METODOLOG√çA Y FOOTER
# ============================================================================

render_methodology_expander()
render_footer()
